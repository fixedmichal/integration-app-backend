"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const versions_1 = require("../../utils/versions");
function switchToJasmineMarbles(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const usesJasmineMarbles = yield replaceJasmineMarbleUsagesInFiles(tree);
        addJasmineMarblesDevDependencyIfUsed(tree, usesJasmineMarbles);
    });
}
exports.default = switchToJasmineMarbles;
function replaceJasmineMarbleUsagesInFiles(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let usesJasmineMarbles = false;
        const projectGraph = yield (() => {
            try {
                return (0, devkit_1.readCachedProjectGraph)();
            }
            catch (_a) {
                return (0, devkit_1.createProjectGraphAsync)();
            }
        })();
        const dirsToTraverse = Object.entries(projectGraph.dependencies)
            .filter(([, dep]) => dep.some(({ target }) => target === 'npm:@nrwl/angular'))
            .map(([projectName]) => (0, devkit_1.readProjectConfiguration)(tree, projectName).root);
        for (const dir of dirsToTraverse) {
            (0, devkit_1.visitNotIgnoredFiles)(tree, dir, (path) => {
                if ((0, path_1.extname)(path) !== '.ts') {
                    return;
                }
                const fileContents = tree.read(path, 'utf-8');
                if (!fileContents.includes('@nrwl/angular/testing')) {
                    return;
                }
                const NRWL_ANGULAR_TESTING_IMPORT_SELECTOR = 'ImportDeclaration:has(StringLiteral[value="@nrwl/angular/testing"])';
                const ast = tsquery_1.tsquery.ast(fileContents);
                const nrwlAngularTestingImportNodes = (0, tsquery_1.tsquery)(ast, NRWL_ANGULAR_TESTING_IMPORT_SELECTOR, { visitAllChildren: true });
                if (!nrwlAngularTestingImportNodes ||
                    nrwlAngularTestingImportNodes.length === 0) {
                    return;
                }
                const jasmineMarblesExportsRegex = new RegExp(/(hot|cold|getTestScheduler|time)/);
                if (!jasmineMarblesExportsRegex.test(nrwlAngularTestingImportNodes[0].getText())) {
                    return;
                }
                const IMPORT_SPECIFIERS_SELECTOR = 'NamedImports > ImportSpecifier';
                const importSpecifierNodes = (0, tsquery_1.tsquery)(nrwlAngularTestingImportNodes[0], IMPORT_SPECIFIERS_SELECTOR, { visitAllChildren: true });
                if (!importSpecifierNodes || importSpecifierNodes.length === 0) {
                    return;
                }
                const validNrwlTestingImports = [];
                const validJasmineMarbleImports = [];
                for (const node of importSpecifierNodes) {
                    const importSymbol = node.getText();
                    if (jasmineMarblesExportsRegex.test(importSymbol)) {
                        validJasmineMarbleImports.push(importSymbol);
                    }
                    else {
                        validNrwlTestingImports.push(importSymbol);
                    }
                }
                if (!usesJasmineMarbles && validJasmineMarbleImports.length > 0) {
                    usesJasmineMarbles = true;
                }
                const newFileContents = `${fileContents.slice(0, nrwlAngularTestingImportNodes[0].getStart())}${validNrwlTestingImports.length > 0
                    ? `import {${validNrwlTestingImports.join(',')}} from '@nrwl/angular/testing';`
                    : ''}
    ${validJasmineMarbleImports.length > 0
                    ? `import {${validJasmineMarbleImports.join(',')}} from 'jasmine-marbles';${fileContents.slice(nrwlAngularTestingImportNodes[0].getEnd(), -1)}`
                    : ''}`;
                tree.write(path, newFileContents);
            });
        }
        return usesJasmineMarbles;
    });
}
function addJasmineMarblesDevDependencyIfUsed(tree, usesJasmineMarbles) {
    if (!usesJasmineMarbles) {
        return;
    }
    const pkgJson = (0, devkit_1.readJson)(tree, 'package.json');
    const jasmineMarblesDependency = pkgJson.dependencies['jasmine-marbles'];
    const jasmineMarblesDevDependency = pkgJson.devDependencies['jasmine-marbles'];
    if (jasmineMarblesDependency || jasmineMarblesDevDependency) {
        return;
    }
    (0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
        'jasmine-marbles': versions_1.jasmineMarblesVersion,
    });
}
//# sourceMappingURL=switch-to-jasmine-marbles.js.map
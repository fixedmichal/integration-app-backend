"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProjectConfig = void 0;
const devkit_1 = require("@nrwl/devkit");
function updateProjectConfig(tree, schema) {
    let projectConfig = (0, devkit_1.readProjectConfiguration)(tree, schema.project);
    projectConfig.targets.build.options.outputPath = `dist/apps/${schema.project}/browser`;
    projectConfig.targets.server = {
        executor: '@angular-devkit/build-angular:server',
        options: {
            outputPath: `dist/apps/${projectConfig.root}/server`,
            main: (0, devkit_1.joinPathFragments)(projectConfig.root, schema.serverFileName),
            tsConfig: (0, devkit_1.joinPathFragments)(projectConfig.root, 'tsconfig.server.json'),
        },
        configurations: {
            production: {
                outputHashing: 'media',
                fileReplacements: [
                    {
                        replace: (0, devkit_1.joinPathFragments)(projectConfig.sourceRoot, 'environments/environment.ts'),
                        with: (0, devkit_1.joinPathFragments)(projectConfig.sourceRoot, 'environments/environment.prod.ts'),
                    },
                ],
            },
            development: {
                optimization: false,
                sourceMap: true,
                extractLicenses: false,
            },
        },
        defaultConfiguration: 'production',
    };
    projectConfig.targets['serve-ssr'] = {
        executor: '@nguniversal/builders:ssr-dev-server',
        configurations: {
            development: {
                browserTarget: `${schema.project}:build:development`,
                serverTarget: `${schema.project}:server:development`,
            },
            production: {
                browserTarget: `${schema.project}:build:production`,
                serverTarget: `${schema.project}:server:production`,
            },
        },
        defaultConfiguration: 'development',
    };
    projectConfig.targets.prerender = {
        executor: '@nguniversal/builders:prerender',
        options: {
            routes: ['/'],
        },
        configurations: {
            development: {
                browserTarget: `${schema.project}:build:development`,
                serverTarget: `${schema.project}:server:development`,
            },
            production: {
                browserTarget: `${schema.project}:build:production`,
                serverTarget: `${schema.project}:server:production`,
            },
        },
        defaultConfiguration: 'production',
    };
    (0, devkit_1.updateProjectConfiguration)(tree, schema.project, projectConfig);
}
exports.updateProjectConfig = updateProjectConfig;
//# sourceMappingURL=update-project-config.js.map
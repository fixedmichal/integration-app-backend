"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Migrator = void 0;
const devkit_1 = require("@nrwl/devkit");
class Migrator {
    constructor(tree, projectConfig, logger) {
        this.tree = tree;
        this.projectConfig = projectConfig;
        this.logger = logger;
        this.originalProjectConfig = Object.freeze(JSON.parse(JSON.stringify(this.projectConfig)));
    }
    // TODO(leo): This should be moved to BuilderMigrator once everything is split into builder migrators.
    updateCacheableOperations(targetNames) {
        var _a;
        if (!targetNames.length) {
            return;
        }
        const workspaceConfig = (0, devkit_1.readWorkspaceConfiguration)(this.tree);
        Object.keys((_a = workspaceConfig.tasksRunnerOptions) !== null && _a !== void 0 ? _a : {}).forEach((taskRunnerName) => {
            var _a;
            const taskRunner = workspaceConfig.tasksRunnerOptions[taskRunnerName];
            taskRunner.options.cacheableOperations = Array.from(new Set([
                ...((_a = taskRunner.options.cacheableOperations) !== null && _a !== void 0 ? _a : []),
                ...targetNames,
            ]));
        });
        (0, devkit_1.updateWorkspaceConfiguration)(this.tree, workspaceConfig);
    }
    // TODO(leo): This should be moved to BuilderMigrator once everything is split into builder migrators.
    updateTsConfigFile(tsConfigPath, rootTsConfigFile, projectOffsetFromRoot) {
        (0, devkit_1.updateJson)(this.tree, tsConfigPath, (json) => {
            var _a;
            json.extends = `${projectOffsetFromRoot}${rootTsConfigFile}`;
            json.compilerOptions = (_a = json.compilerOptions) !== null && _a !== void 0 ? _a : {};
            json.compilerOptions.outDir = `${projectOffsetFromRoot}dist/out-tsc`;
            return json;
        });
    }
}
exports.Migrator = Migrator;
//# sourceMappingURL=migrator.js.map
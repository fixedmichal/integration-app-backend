import type { TargetConfiguration, Tree } from '@nrwl/devkit';
import type { GeneratorOptions } from '../../schema';
import type { MigrationProjectConfiguration, Target, ValidationResult } from '../../utilities';
import { Logger } from '../../utilities';
import type { BuilderMigratorClassType } from '../builders';
import { BuilderMigrator } from '../builders';
import { Migrator } from '../migrator';
export declare abstract class ProjectMigrator<TargetType extends string = string> extends Migrator {
    protected readonly options: GeneratorOptions;
    protected readonly targets: Record<TargetType, Target>;
    get projectName(): string;
    protected builderMigrators: BuilderMigrator[];
    protected readonly targetNames: Partial<Record<TargetType, string>>;
    constructor(tree: Tree, options: GeneratorOptions, targets: Record<TargetType, Target>, project: MigrationProjectConfiguration, rootDir: string, logger?: Logger, supportedBuilderMigrators?: BuilderMigratorClassType[]);
    validate(): ValidationResult;
    protected convertAsset(asset: string | any): string | any;
    protected convertEsLintConfigExtendToNewPath(eslintConfigPath: string, extendPath: string): string;
    protected convertSourceRootPath(originalPath: string): string;
    protected convertRootPath(originalPath: string): string;
    protected convertPath(originalPath: string): string;
    protected getTargetValuesForOption(target: TargetConfiguration, optionPath: string): any[];
    protected getValueForOption(options: Record<string, any> | undefined, optionPath: string): any;
    protected moveProjectRootFile(filePath: string, isRequired?: boolean): void;
    protected moveDir(from: string, to: string): void;
    protected moveFile(from: string, to: string, required?: boolean): void;
    private collectTargetNames;
    private createBuilderMigrators;
}

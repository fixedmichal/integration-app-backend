
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Integration
 * 
 */
export type Integration = {
  id: number
  name: string
  budget: number
  participants: number
  picture: string | null
  dateStart: Date
  dateEnd: Date
}

/**
 * Model Version
 * 
 */
export type Version = {
  id: number
  name: string
  integrationId: number
  isFinal: boolean
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: number
  name: string
  integrationId: number
}

/**
 * Model CategoryItem
 * 
 */
export type CategoryItem = {
  id: number
  name: string
  cost: number
  perParticipant: boolean
  versionId: number
  categoryId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Integrations
 * const integrations = await prisma.integration.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Integrations
   * const integrations = await prisma.integration.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.integration`: Exposes CRUD operations for the **Integration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integrations
    * const integrations = await prisma.integration.findMany()
    * ```
    */
  get integration(): Prisma.IntegrationDelegate<GlobalReject>;

  /**
   * `prisma.version`: Exposes CRUD operations for the **Version** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Versions
    * const versions = await prisma.version.findMany()
    * ```
    */
  get version(): Prisma.VersionDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.categoryItem`: Exposes CRUD operations for the **CategoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoryItems
    * const categoryItems = await prisma.categoryItem.findMany()
    * ```
    */
  get categoryItem(): Prisma.CategoryItemDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Integration: 'Integration',
    Version: 'Version',
    Category: 'Category',
    CategoryItem: 'CategoryItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type IntegrationCountOutputType
   */


  export type IntegrationCountOutputType = {
    versions: number
    categories: number
  }

  export type IntegrationCountOutputTypeSelect = {
    versions?: boolean
    categories?: boolean
  }

  export type IntegrationCountOutputTypeGetPayload<
    S extends boolean | null | undefined | IntegrationCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? IntegrationCountOutputType
    : S extends undefined
    ? never
    : S extends IntegrationCountOutputTypeArgs
    ?'include' extends U
    ? IntegrationCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof IntegrationCountOutputType ? IntegrationCountOutputType[P] : never
  } 
    : IntegrationCountOutputType
  : IntegrationCountOutputType




  // Custom InputTypes

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the IntegrationCountOutputType
     * 
    **/
    select?: IntegrationCountOutputTypeSelect | null
  }



  /**
   * Count Type VersionCountOutputType
   */


  export type VersionCountOutputType = {
    categoryItems: number
  }

  export type VersionCountOutputTypeSelect = {
    categoryItems?: boolean
  }

  export type VersionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | VersionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? VersionCountOutputType
    : S extends undefined
    ? never
    : S extends VersionCountOutputTypeArgs
    ?'include' extends U
    ? VersionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VersionCountOutputType ? VersionCountOutputType[P] : never
  } 
    : VersionCountOutputType
  : VersionCountOutputType




  // Custom InputTypes

  /**
   * VersionCountOutputType without action
   */
  export type VersionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the VersionCountOutputType
     * 
    **/
    select?: VersionCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    categoryItems: number
  }

  export type CategoryCountOutputTypeSelect = {
    categoryItems?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Integration
   */


  export type AggregateIntegration = {
    _count: IntegrationCountAggregateOutputType | null
    _avg: IntegrationAvgAggregateOutputType | null
    _sum: IntegrationSumAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  export type IntegrationAvgAggregateOutputType = {
    id: number | null
    budget: number | null
    participants: number | null
  }

  export type IntegrationSumAggregateOutputType = {
    id: number | null
    budget: number | null
    participants: number | null
  }

  export type IntegrationMinAggregateOutputType = {
    id: number | null
    name: string | null
    budget: number | null
    participants: number | null
    picture: string | null
    dateStart: Date | null
    dateEnd: Date | null
  }

  export type IntegrationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    budget: number | null
    participants: number | null
    picture: string | null
    dateStart: Date | null
    dateEnd: Date | null
  }

  export type IntegrationCountAggregateOutputType = {
    id: number
    name: number
    budget: number
    participants: number
    picture: number
    dateStart: number
    dateEnd: number
    _all: number
  }


  export type IntegrationAvgAggregateInputType = {
    id?: true
    budget?: true
    participants?: true
  }

  export type IntegrationSumAggregateInputType = {
    id?: true
    budget?: true
    participants?: true
  }

  export type IntegrationMinAggregateInputType = {
    id?: true
    name?: true
    budget?: true
    participants?: true
    picture?: true
    dateStart?: true
    dateEnd?: true
  }

  export type IntegrationMaxAggregateInputType = {
    id?: true
    name?: true
    budget?: true
    participants?: true
    picture?: true
    dateStart?: true
    dateEnd?: true
  }

  export type IntegrationCountAggregateInputType = {
    id?: true
    name?: true
    budget?: true
    participants?: true
    picture?: true
    dateStart?: true
    dateEnd?: true
    _all?: true
  }

  export type IntegrationAggregateArgs = {
    /**
     * Filter which Integration to aggregate.
     * 
    **/
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     * 
    **/
    orderBy?: Enumerable<IntegrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Integrations
    **/
    _count?: true | IntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IntegrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IntegrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationMaxAggregateInputType
  }

  export type GetIntegrationAggregateType<T extends IntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegration[P]>
      : GetScalarType<T[P], AggregateIntegration[P]>
  }




  export type IntegrationGroupByArgs = {
    where?: IntegrationWhereInput
    orderBy?: Enumerable<IntegrationOrderByWithAggregationInput>
    by: Array<IntegrationScalarFieldEnum>
    having?: IntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationCountAggregateInputType | true
    _avg?: IntegrationAvgAggregateInputType
    _sum?: IntegrationSumAggregateInputType
    _min?: IntegrationMinAggregateInputType
    _max?: IntegrationMaxAggregateInputType
  }


  export type IntegrationGroupByOutputType = {
    id: number
    name: string
    budget: number
    participants: number
    picture: string | null
    dateStart: Date
    dateEnd: Date
    _count: IntegrationCountAggregateOutputType | null
    _avg: IntegrationAvgAggregateOutputType | null
    _sum: IntegrationSumAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  type GetIntegrationGroupByPayload<T extends IntegrationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<IntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationSelect = {
    id?: boolean
    name?: boolean
    budget?: boolean
    participants?: boolean
    picture?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    versions?: boolean | VersionFindManyArgs
    categories?: boolean | CategoryFindManyArgs
    _count?: boolean | IntegrationCountOutputTypeArgs
  }

  export type IntegrationInclude = {
    versions?: boolean | VersionFindManyArgs
    categories?: boolean | CategoryFindManyArgs
    _count?: boolean | IntegrationCountOutputTypeArgs
  }

  export type IntegrationGetPayload<
    S extends boolean | null | undefined | IntegrationArgs,
    U = keyof S
      > = S extends true
        ? Integration
    : S extends undefined
    ? never
    : S extends IntegrationArgs | IntegrationFindManyArgs
    ?'include' extends U
    ? Integration  & {
    [P in TrueKeys<S['include']>]:
        P extends 'versions' ? Array < VersionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'categories' ? Array < CategoryGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? IntegrationCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'versions' ? Array < VersionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'categories' ? Array < CategoryGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? IntegrationCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Integration ? Integration[P] : never
  } 
    : Integration
  : Integration


  type IntegrationCountArgs = Merge<
    Omit<IntegrationFindManyArgs, 'select' | 'include'> & {
      select?: IntegrationCountAggregateInputType | true
    }
  >

  export interface IntegrationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Integration that matches the filter.
     * @param {IntegrationFindUniqueArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IntegrationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, IntegrationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Integration'> extends True ? CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>> : CheckSelect<T, Prisma__IntegrationClient<Integration | null, null>, Prisma__IntegrationClient<IntegrationGetPayload<T> | null, null>>

    /**
     * Find the first Integration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IntegrationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, IntegrationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Integration'> extends True ? CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>> : CheckSelect<T, Prisma__IntegrationClient<Integration | null, null>, Prisma__IntegrationClient<IntegrationGetPayload<T> | null, null>>

    /**
     * Find zero or more Integrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Integrations
     * const integrations = await prisma.integration.findMany()
     * 
     * // Get first 10 Integrations
     * const integrations = await prisma.integration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationWithIdOnly = await prisma.integration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IntegrationFindManyArgs>(
      args?: SelectSubset<T, IntegrationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Integration>>, PrismaPromise<Array<IntegrationGetPayload<T>>>>

    /**
     * Create a Integration.
     * @param {IntegrationCreateArgs} args - Arguments to create a Integration.
     * @example
     * // Create one Integration
     * const Integration = await prisma.integration.create({
     *   data: {
     *     // ... data to create a Integration
     *   }
     * })
     * 
    **/
    create<T extends IntegrationCreateArgs>(
      args: SelectSubset<T, IntegrationCreateArgs>
    ): CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>>

    /**
     * Delete a Integration.
     * @param {IntegrationDeleteArgs} args - Arguments to delete one Integration.
     * @example
     * // Delete one Integration
     * const Integration = await prisma.integration.delete({
     *   where: {
     *     // ... filter to delete one Integration
     *   }
     * })
     * 
    **/
    delete<T extends IntegrationDeleteArgs>(
      args: SelectSubset<T, IntegrationDeleteArgs>
    ): CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>>

    /**
     * Update one Integration.
     * @param {IntegrationUpdateArgs} args - Arguments to update one Integration.
     * @example
     * // Update one Integration
     * const integration = await prisma.integration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IntegrationUpdateArgs>(
      args: SelectSubset<T, IntegrationUpdateArgs>
    ): CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>>

    /**
     * Delete zero or more Integrations.
     * @param {IntegrationDeleteManyArgs} args - Arguments to filter Integrations to delete.
     * @example
     * // Delete a few Integrations
     * const { count } = await prisma.integration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IntegrationDeleteManyArgs>(
      args?: SelectSubset<T, IntegrationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Integrations
     * const integration = await prisma.integration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IntegrationUpdateManyArgs>(
      args: SelectSubset<T, IntegrationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Integration.
     * @param {IntegrationUpsertArgs} args - Arguments to update or create a Integration.
     * @example
     * // Update or create a Integration
     * const integration = await prisma.integration.upsert({
     *   create: {
     *     // ... data to create a Integration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Integration we want to update
     *   }
     * })
    **/
    upsert<T extends IntegrationUpsertArgs>(
      args: SelectSubset<T, IntegrationUpsertArgs>
    ): CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>>

    /**
     * Find one Integration that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {IntegrationFindUniqueOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IntegrationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, IntegrationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>>

    /**
     * Find the first Integration that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IntegrationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, IntegrationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__IntegrationClient<Integration>, Prisma__IntegrationClient<IntegrationGetPayload<T>>>

    /**
     * Count the number of Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationCountArgs} args - Arguments to filter Integrations to count.
     * @example
     * // Count the number of Integrations
     * const count = await prisma.integration.count({
     *   where: {
     *     // ... the filter for the Integrations we want to count
     *   }
     * })
    **/
    count<T extends IntegrationCountArgs>(
      args?: Subset<T, IntegrationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationAggregateArgs>(args: Subset<T, IntegrationAggregateArgs>): PrismaPromise<GetIntegrationAggregateType<T>>

    /**
     * Group by Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Integration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__IntegrationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    versions<T extends VersionFindManyArgs = {}>(args?: Subset<T, VersionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Version>| Null>, PrismaPromise<Array<VersionGetPayload<T>>| Null>>;

    categories<T extends CategoryFindManyArgs = {}>(args?: Subset<T, CategoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Category>| Null>, PrismaPromise<Array<CategoryGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Integration base type for findUnique actions
   */
  export type IntegrationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
    /**
     * Filter, which Integration to fetch.
     * 
    **/
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration: findUnique
   */
  export interface IntegrationFindUniqueArgs extends IntegrationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Integration base type for findFirst actions
   */
  export type IntegrationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
    /**
     * Filter, which Integration to fetch.
     * 
    **/
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     * 
    **/
    orderBy?: Enumerable<IntegrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Integrations.
     * 
    **/
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Integrations.
     * 
    **/
    distinct?: Enumerable<IntegrationScalarFieldEnum>
  }

  /**
   * Integration: findFirst
   */
  export interface IntegrationFindFirstArgs extends IntegrationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Integration findMany
   */
  export type IntegrationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
    /**
     * Filter, which Integrations to fetch.
     * 
    **/
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     * 
    **/
    orderBy?: Enumerable<IntegrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Integrations.
     * 
    **/
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<IntegrationScalarFieldEnum>
  }


  /**
   * Integration create
   */
  export type IntegrationCreateArgs = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
    /**
     * The data needed to create a Integration.
     * 
    **/
    data: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
  }


  /**
   * Integration update
   */
  export type IntegrationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
    /**
     * The data needed to update a Integration.
     * 
    **/
    data: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
    /**
     * Choose, which Integration to update.
     * 
    **/
    where: IntegrationWhereUniqueInput
  }


  /**
   * Integration updateMany
   */
  export type IntegrationUpdateManyArgs = {
    /**
     * The data used to update Integrations.
     * 
    **/
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyInput>
    /**
     * Filter which Integrations to update
     * 
    **/
    where?: IntegrationWhereInput
  }


  /**
   * Integration upsert
   */
  export type IntegrationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
    /**
     * The filter to search for the Integration to update in case it exists.
     * 
    **/
    where: IntegrationWhereUniqueInput
    /**
     * In case the Integration found by the `where` argument doesn't exist, create a new Integration with this data.
     * 
    **/
    create: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
    /**
     * In case the Integration was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
  }


  /**
   * Integration delete
   */
  export type IntegrationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
    /**
     * Filter which Integration to delete.
     * 
    **/
    where: IntegrationWhereUniqueInput
  }


  /**
   * Integration deleteMany
   */
  export type IntegrationDeleteManyArgs = {
    /**
     * Filter which Integrations to delete
     * 
    **/
    where?: IntegrationWhereInput
  }


  /**
   * Integration: findUniqueOrThrow
   */
  export type IntegrationFindUniqueOrThrowArgs = IntegrationFindUniqueArgsBase
      

  /**
   * Integration: findFirstOrThrow
   */
  export type IntegrationFindFirstOrThrowArgs = IntegrationFindFirstArgsBase
      

  /**
   * Integration without action
   */
  export type IntegrationArgs = {
    /**
     * Select specific fields to fetch from the Integration
     * 
    **/
    select?: IntegrationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: IntegrationInclude | null
  }



  /**
   * Model Version
   */


  export type AggregateVersion = {
    _count: VersionCountAggregateOutputType | null
    _avg: VersionAvgAggregateOutputType | null
    _sum: VersionSumAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  export type VersionAvgAggregateOutputType = {
    id: number | null
    integrationId: number | null
  }

  export type VersionSumAggregateOutputType = {
    id: number | null
    integrationId: number | null
  }

  export type VersionMinAggregateOutputType = {
    id: number | null
    name: string | null
    integrationId: number | null
    isFinal: boolean | null
  }

  export type VersionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    integrationId: number | null
    isFinal: boolean | null
  }

  export type VersionCountAggregateOutputType = {
    id: number
    name: number
    integrationId: number
    isFinal: number
    _all: number
  }


  export type VersionAvgAggregateInputType = {
    id?: true
    integrationId?: true
  }

  export type VersionSumAggregateInputType = {
    id?: true
    integrationId?: true
  }

  export type VersionMinAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
    isFinal?: true
  }

  export type VersionMaxAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
    isFinal?: true
  }

  export type VersionCountAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
    isFinal?: true
    _all?: true
  }

  export type VersionAggregateArgs = {
    /**
     * Filter which Version to aggregate.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Versions
    **/
    _count?: true | VersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VersionMaxAggregateInputType
  }

  export type GetVersionAggregateType<T extends VersionAggregateArgs> = {
        [P in keyof T & keyof AggregateVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVersion[P]>
      : GetScalarType<T[P], AggregateVersion[P]>
  }




  export type VersionGroupByArgs = {
    where?: VersionWhereInput
    orderBy?: Enumerable<VersionOrderByWithAggregationInput>
    by: Array<VersionScalarFieldEnum>
    having?: VersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VersionCountAggregateInputType | true
    _avg?: VersionAvgAggregateInputType
    _sum?: VersionSumAggregateInputType
    _min?: VersionMinAggregateInputType
    _max?: VersionMaxAggregateInputType
  }


  export type VersionGroupByOutputType = {
    id: number
    name: string
    integrationId: number
    isFinal: boolean
    _count: VersionCountAggregateOutputType | null
    _avg: VersionAvgAggregateOutputType | null
    _sum: VersionSumAggregateOutputType | null
    _min: VersionMinAggregateOutputType | null
    _max: VersionMaxAggregateOutputType | null
  }

  type GetVersionGroupByPayload<T extends VersionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VersionGroupByOutputType[P]>
            : GetScalarType<T[P], VersionGroupByOutputType[P]>
        }
      >
    >


  export type VersionSelect = {
    id?: boolean
    name?: boolean
    integration?: boolean | IntegrationArgs
    integrationId?: boolean
    categoryItems?: boolean | CategoryItemFindManyArgs
    isFinal?: boolean
    _count?: boolean | VersionCountOutputTypeArgs
  }

  export type VersionInclude = {
    integration?: boolean | IntegrationArgs
    categoryItems?: boolean | CategoryItemFindManyArgs
    _count?: boolean | VersionCountOutputTypeArgs
  }

  export type VersionGetPayload<
    S extends boolean | null | undefined | VersionArgs,
    U = keyof S
      > = S extends true
        ? Version
    : S extends undefined
    ? never
    : S extends VersionArgs | VersionFindManyArgs
    ?'include' extends U
    ? Version  & {
    [P in TrueKeys<S['include']>]:
        P extends 'integration' ? IntegrationGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'categoryItems' ? Array < CategoryItemGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? VersionCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'integration' ? IntegrationGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'categoryItems' ? Array < CategoryItemGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? VersionCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Version ? Version[P] : never
  } 
    : Version
  : Version


  type VersionCountArgs = Merge<
    Omit<VersionFindManyArgs, 'select' | 'include'> & {
      select?: VersionCountAggregateInputType | true
    }
  >

  export interface VersionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Version that matches the filter.
     * @param {VersionFindUniqueArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VersionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VersionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Version'> extends True ? CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>> : CheckSelect<T, Prisma__VersionClient<Version | null, null>, Prisma__VersionClient<VersionGetPayload<T> | null, null>>

    /**
     * Find the first Version that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VersionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VersionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Version'> extends True ? CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>> : CheckSelect<T, Prisma__VersionClient<Version | null, null>, Prisma__VersionClient<VersionGetPayload<T> | null, null>>

    /**
     * Find zero or more Versions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Versions
     * const versions = await prisma.version.findMany()
     * 
     * // Get first 10 Versions
     * const versions = await prisma.version.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const versionWithIdOnly = await prisma.version.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VersionFindManyArgs>(
      args?: SelectSubset<T, VersionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Version>>, PrismaPromise<Array<VersionGetPayload<T>>>>

    /**
     * Create a Version.
     * @param {VersionCreateArgs} args - Arguments to create a Version.
     * @example
     * // Create one Version
     * const Version = await prisma.version.create({
     *   data: {
     *     // ... data to create a Version
     *   }
     * })
     * 
    **/
    create<T extends VersionCreateArgs>(
      args: SelectSubset<T, VersionCreateArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Delete a Version.
     * @param {VersionDeleteArgs} args - Arguments to delete one Version.
     * @example
     * // Delete one Version
     * const Version = await prisma.version.delete({
     *   where: {
     *     // ... filter to delete one Version
     *   }
     * })
     * 
    **/
    delete<T extends VersionDeleteArgs>(
      args: SelectSubset<T, VersionDeleteArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Update one Version.
     * @param {VersionUpdateArgs} args - Arguments to update one Version.
     * @example
     * // Update one Version
     * const version = await prisma.version.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VersionUpdateArgs>(
      args: SelectSubset<T, VersionUpdateArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Delete zero or more Versions.
     * @param {VersionDeleteManyArgs} args - Arguments to filter Versions to delete.
     * @example
     * // Delete a few Versions
     * const { count } = await prisma.version.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VersionDeleteManyArgs>(
      args?: SelectSubset<T, VersionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Versions
     * const version = await prisma.version.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VersionUpdateManyArgs>(
      args: SelectSubset<T, VersionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Version.
     * @param {VersionUpsertArgs} args - Arguments to update or create a Version.
     * @example
     * // Update or create a Version
     * const version = await prisma.version.upsert({
     *   create: {
     *     // ... data to create a Version
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Version we want to update
     *   }
     * })
    **/
    upsert<T extends VersionUpsertArgs>(
      args: SelectSubset<T, VersionUpsertArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Find one Version that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VersionFindUniqueOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VersionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VersionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Find the first Version that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionFindFirstOrThrowArgs} args - Arguments to find a Version
     * @example
     * // Get one Version
     * const version = await prisma.version.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VersionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VersionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VersionClient<Version>, Prisma__VersionClient<VersionGetPayload<T>>>

    /**
     * Count the number of Versions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionCountArgs} args - Arguments to filter Versions to count.
     * @example
     * // Count the number of Versions
     * const count = await prisma.version.count({
     *   where: {
     *     // ... the filter for the Versions we want to count
     *   }
     * })
    **/
    count<T extends VersionCountArgs>(
      args?: Subset<T, VersionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VersionAggregateArgs>(args: Subset<T, VersionAggregateArgs>): PrismaPromise<GetVersionAggregateType<T>>

    /**
     * Group by Version.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VersionGroupByArgs['orderBy'] }
        : { orderBy?: VersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVersionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Version.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VersionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    integration<T extends IntegrationArgs = {}>(args?: Subset<T, IntegrationArgs>): CheckSelect<T, Prisma__IntegrationClient<Integration | Null>, Prisma__IntegrationClient<IntegrationGetPayload<T> | Null>>;

    categoryItems<T extends CategoryItemFindManyArgs = {}>(args?: Subset<T, CategoryItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoryItem>| Null>, PrismaPromise<Array<CategoryItemGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Version base type for findUnique actions
   */
  export type VersionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Version to fetch.
     * 
    **/
    where: VersionWhereUniqueInput
  }

  /**
   * Version: findUnique
   */
  export interface VersionFindUniqueArgs extends VersionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version base type for findFirst actions
   */
  export type VersionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Version to fetch.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Versions.
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Versions.
     * 
    **/
    distinct?: Enumerable<VersionScalarFieldEnum>
  }

  /**
   * Version: findFirst
   */
  export interface VersionFindFirstArgs extends VersionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Version findMany
   */
  export type VersionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter, which Versions to fetch.
     * 
    **/
    where?: VersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Versions to fetch.
     * 
    **/
    orderBy?: Enumerable<VersionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Versions.
     * 
    **/
    cursor?: VersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Versions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Versions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VersionScalarFieldEnum>
  }


  /**
   * Version create
   */
  export type VersionCreateArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The data needed to create a Version.
     * 
    **/
    data: XOR<VersionCreateInput, VersionUncheckedCreateInput>
  }


  /**
   * Version update
   */
  export type VersionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The data needed to update a Version.
     * 
    **/
    data: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
    /**
     * Choose, which Version to update.
     * 
    **/
    where: VersionWhereUniqueInput
  }


  /**
   * Version updateMany
   */
  export type VersionUpdateManyArgs = {
    /**
     * The data used to update Versions.
     * 
    **/
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyInput>
    /**
     * Filter which Versions to update
     * 
    **/
    where?: VersionWhereInput
  }


  /**
   * Version upsert
   */
  export type VersionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * The filter to search for the Version to update in case it exists.
     * 
    **/
    where: VersionWhereUniqueInput
    /**
     * In case the Version found by the `where` argument doesn't exist, create a new Version with this data.
     * 
    **/
    create: XOR<VersionCreateInput, VersionUncheckedCreateInput>
    /**
     * In case the Version was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VersionUpdateInput, VersionUncheckedUpdateInput>
  }


  /**
   * Version delete
   */
  export type VersionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
    /**
     * Filter which Version to delete.
     * 
    **/
    where: VersionWhereUniqueInput
  }


  /**
   * Version deleteMany
   */
  export type VersionDeleteManyArgs = {
    /**
     * Filter which Versions to delete
     * 
    **/
    where?: VersionWhereInput
  }


  /**
   * Version: findUniqueOrThrow
   */
  export type VersionFindUniqueOrThrowArgs = VersionFindUniqueArgsBase
      

  /**
   * Version: findFirstOrThrow
   */
  export type VersionFindFirstOrThrowArgs = VersionFindFirstArgsBase
      

  /**
   * Version without action
   */
  export type VersionArgs = {
    /**
     * Select specific fields to fetch from the Version
     * 
    **/
    select?: VersionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VersionInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    integrationId: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    integrationId: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    integrationId: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    integrationId: number | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    integrationId: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    integrationId?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    integrationId?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    integrationId?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string
    integrationId: number
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    integration?: boolean | IntegrationArgs
    integrationId?: boolean
    categoryItems?: boolean | CategoryItemFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    integration?: boolean | IntegrationArgs
    categoryItems?: boolean | CategoryItemFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'integration' ? IntegrationGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'categoryItems' ? Array < CategoryItemGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'integration' ? IntegrationGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'categoryItems' ? Array < CategoryItemGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null, null>, Prisma__CategoryClient<CategoryGetPayload<T> | null, null>>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null, null>, Prisma__CategoryClient<CategoryGetPayload<T> | null, null>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Find one Category that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    integration<T extends IntegrationArgs = {}>(args?: Subset<T, IntegrationArgs>): CheckSelect<T, Prisma__IntegrationClient<Integration | Null>, Prisma__IntegrationClient<IntegrationGetPayload<T> | Null>>;

    categoryItems<T extends CategoryItemFindManyArgs = {}>(args?: Subset<T, CategoryItemFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CategoryItem>| Null>, PrismaPromise<Array<CategoryItemGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }

  /**
   * Category: findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category: findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category: findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = CategoryFindUniqueArgsBase
      

  /**
   * Category: findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = CategoryFindFirstArgsBase
      

  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model CategoryItem
   */


  export type AggregateCategoryItem = {
    _count: CategoryItemCountAggregateOutputType | null
    _avg: CategoryItemAvgAggregateOutputType | null
    _sum: CategoryItemSumAggregateOutputType | null
    _min: CategoryItemMinAggregateOutputType | null
    _max: CategoryItemMaxAggregateOutputType | null
  }

  export type CategoryItemAvgAggregateOutputType = {
    id: number | null
    cost: number | null
    versionId: number | null
    categoryId: number | null
  }

  export type CategoryItemSumAggregateOutputType = {
    id: number | null
    cost: number | null
    versionId: number | null
    categoryId: number | null
  }

  export type CategoryItemMinAggregateOutputType = {
    id: number | null
    name: string | null
    cost: number | null
    perParticipant: boolean | null
    versionId: number | null
    categoryId: number | null
  }

  export type CategoryItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
    cost: number | null
    perParticipant: boolean | null
    versionId: number | null
    categoryId: number | null
  }

  export type CategoryItemCountAggregateOutputType = {
    id: number
    name: number
    cost: number
    perParticipant: number
    versionId: number
    categoryId: number
    _all: number
  }


  export type CategoryItemAvgAggregateInputType = {
    id?: true
    cost?: true
    versionId?: true
    categoryId?: true
  }

  export type CategoryItemSumAggregateInputType = {
    id?: true
    cost?: true
    versionId?: true
    categoryId?: true
  }

  export type CategoryItemMinAggregateInputType = {
    id?: true
    name?: true
    cost?: true
    perParticipant?: true
    versionId?: true
    categoryId?: true
  }

  export type CategoryItemMaxAggregateInputType = {
    id?: true
    name?: true
    cost?: true
    perParticipant?: true
    versionId?: true
    categoryId?: true
  }

  export type CategoryItemCountAggregateInputType = {
    id?: true
    name?: true
    cost?: true
    perParticipant?: true
    versionId?: true
    categoryId?: true
    _all?: true
  }

  export type CategoryItemAggregateArgs = {
    /**
     * Filter which CategoryItem to aggregate.
     * 
    **/
    where?: CategoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryItems to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoryItems
    **/
    _count?: true | CategoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryItemMaxAggregateInputType
  }

  export type GetCategoryItemAggregateType<T extends CategoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoryItem[P]>
      : GetScalarType<T[P], AggregateCategoryItem[P]>
  }




  export type CategoryItemGroupByArgs = {
    where?: CategoryItemWhereInput
    orderBy?: Enumerable<CategoryItemOrderByWithAggregationInput>
    by: Array<CategoryItemScalarFieldEnum>
    having?: CategoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryItemCountAggregateInputType | true
    _avg?: CategoryItemAvgAggregateInputType
    _sum?: CategoryItemSumAggregateInputType
    _min?: CategoryItemMinAggregateInputType
    _max?: CategoryItemMaxAggregateInputType
  }


  export type CategoryItemGroupByOutputType = {
    id: number
    name: string
    cost: number
    perParticipant: boolean
    versionId: number
    categoryId: number
    _count: CategoryItemCountAggregateOutputType | null
    _avg: CategoryItemAvgAggregateOutputType | null
    _sum: CategoryItemSumAggregateOutputType | null
    _min: CategoryItemMinAggregateOutputType | null
    _max: CategoryItemMaxAggregateOutputType | null
  }

  type GetCategoryItemGroupByPayload<T extends CategoryItemGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryItemGroupByOutputType[P]>
        }
      >
    >


  export type CategoryItemSelect = {
    id?: boolean
    name?: boolean
    cost?: boolean
    perParticipant?: boolean
    version?: boolean | VersionArgs
    versionId?: boolean
    category?: boolean | CategoryArgs
    categoryId?: boolean
  }

  export type CategoryItemInclude = {
    version?: boolean | VersionArgs
    category?: boolean | CategoryArgs
  }

  export type CategoryItemGetPayload<
    S extends boolean | null | undefined | CategoryItemArgs,
    U = keyof S
      > = S extends true
        ? CategoryItem
    : S extends undefined
    ? never
    : S extends CategoryItemArgs | CategoryItemFindManyArgs
    ?'include' extends U
    ? CategoryItem  & {
    [P in TrueKeys<S['include']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'category' ? CategoryGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'version' ? VersionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'category' ? CategoryGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof CategoryItem ? CategoryItem[P] : never
  } 
    : CategoryItem
  : CategoryItem


  type CategoryItemCountArgs = Merge<
    Omit<CategoryItemFindManyArgs, 'select' | 'include'> & {
      select?: CategoryItemCountAggregateInputType | true
    }
  >

  export interface CategoryItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one CategoryItem that matches the filter.
     * @param {CategoryItemFindUniqueArgs} args - Arguments to find a CategoryItem
     * @example
     * // Get one CategoryItem
     * const categoryItem = await prisma.categoryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategoryItem'> extends True ? CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>> : CheckSelect<T, Prisma__CategoryItemClient<CategoryItem | null, null>, Prisma__CategoryItemClient<CategoryItemGetPayload<T> | null, null>>

    /**
     * Find the first CategoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryItemFindFirstArgs} args - Arguments to find a CategoryItem
     * @example
     * // Get one CategoryItem
     * const categoryItem = await prisma.categoryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategoryItem'> extends True ? CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>> : CheckSelect<T, Prisma__CategoryItemClient<CategoryItem | null, null>, Prisma__CategoryItemClient<CategoryItemGetPayload<T> | null, null>>

    /**
     * Find zero or more CategoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoryItems
     * const categoryItems = await prisma.categoryItem.findMany()
     * 
     * // Get first 10 CategoryItems
     * const categoryItems = await prisma.categoryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryItemWithIdOnly = await prisma.categoryItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryItemFindManyArgs>(
      args?: SelectSubset<T, CategoryItemFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CategoryItem>>, PrismaPromise<Array<CategoryItemGetPayload<T>>>>

    /**
     * Create a CategoryItem.
     * @param {CategoryItemCreateArgs} args - Arguments to create a CategoryItem.
     * @example
     * // Create one CategoryItem
     * const CategoryItem = await prisma.categoryItem.create({
     *   data: {
     *     // ... data to create a CategoryItem
     *   }
     * })
     * 
    **/
    create<T extends CategoryItemCreateArgs>(
      args: SelectSubset<T, CategoryItemCreateArgs>
    ): CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>>

    /**
     * Delete a CategoryItem.
     * @param {CategoryItemDeleteArgs} args - Arguments to delete one CategoryItem.
     * @example
     * // Delete one CategoryItem
     * const CategoryItem = await prisma.categoryItem.delete({
     *   where: {
     *     // ... filter to delete one CategoryItem
     *   }
     * })
     * 
    **/
    delete<T extends CategoryItemDeleteArgs>(
      args: SelectSubset<T, CategoryItemDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>>

    /**
     * Update one CategoryItem.
     * @param {CategoryItemUpdateArgs} args - Arguments to update one CategoryItem.
     * @example
     * // Update one CategoryItem
     * const categoryItem = await prisma.categoryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryItemUpdateArgs>(
      args: SelectSubset<T, CategoryItemUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>>

    /**
     * Delete zero or more CategoryItems.
     * @param {CategoryItemDeleteManyArgs} args - Arguments to filter CategoryItems to delete.
     * @example
     * // Delete a few CategoryItems
     * const { count } = await prisma.categoryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryItemDeleteManyArgs>(
      args?: SelectSubset<T, CategoryItemDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoryItems
     * const categoryItem = await prisma.categoryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryItemUpdateManyArgs>(
      args: SelectSubset<T, CategoryItemUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoryItem.
     * @param {CategoryItemUpsertArgs} args - Arguments to update or create a CategoryItem.
     * @example
     * // Update or create a CategoryItem
     * const categoryItem = await prisma.categoryItem.upsert({
     *   create: {
     *     // ... data to create a CategoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoryItem we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryItemUpsertArgs>(
      args: SelectSubset<T, CategoryItemUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>>

    /**
     * Find one CategoryItem that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CategoryItemFindUniqueOrThrowArgs} args - Arguments to find a CategoryItem
     * @example
     * // Get one CategoryItem
     * const categoryItem = await prisma.categoryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryItemFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>>

    /**
     * Find the first CategoryItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryItemFindFirstOrThrowArgs} args - Arguments to find a CategoryItem
     * @example
     * // Get one CategoryItem
     * const categoryItem = await prisma.categoryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryItemFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CategoryItemClient<CategoryItem>, Prisma__CategoryItemClient<CategoryItemGetPayload<T>>>

    /**
     * Count the number of CategoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryItemCountArgs} args - Arguments to filter CategoryItems to count.
     * @example
     * // Count the number of CategoryItems
     * const count = await prisma.categoryItem.count({
     *   where: {
     *     // ... the filter for the CategoryItems we want to count
     *   }
     * })
    **/
    count<T extends CategoryItemCountArgs>(
      args?: Subset<T, CategoryItemCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryItemAggregateArgs>(args: Subset<T, CategoryItemAggregateArgs>): PrismaPromise<GetCategoryItemAggregateType<T>>

    /**
     * Group by CategoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryItemGroupByArgs['orderBy'] }
        : { orderBy?: CategoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryItemGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryItemClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    version<T extends VersionArgs = {}>(args?: Subset<T, VersionArgs>): CheckSelect<T, Prisma__VersionClient<Version | Null>, Prisma__VersionClient<VersionGetPayload<T> | Null>>;

    category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | Null>, Prisma__CategoryClient<CategoryGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CategoryItem base type for findUnique actions
   */
  export type CategoryItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
    /**
     * Filter, which CategoryItem to fetch.
     * 
    **/
    where: CategoryItemWhereUniqueInput
  }

  /**
   * CategoryItem: findUnique
   */
  export interface CategoryItemFindUniqueArgs extends CategoryItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoryItem base type for findFirst actions
   */
  export type CategoryItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
    /**
     * Filter, which CategoryItem to fetch.
     * 
    **/
    where?: CategoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryItems to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryItems.
     * 
    **/
    cursor?: CategoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryItems.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryItems.
     * 
    **/
    distinct?: Enumerable<CategoryItemScalarFieldEnum>
  }

  /**
   * CategoryItem: findFirst
   */
  export interface CategoryItemFindFirstArgs extends CategoryItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategoryItem findMany
   */
  export type CategoryItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
    /**
     * Filter, which CategoryItems to fetch.
     * 
    **/
    where?: CategoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryItems to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoryItems.
     * 
    **/
    cursor?: CategoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryItems from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryItems.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryItemScalarFieldEnum>
  }


  /**
   * CategoryItem create
   */
  export type CategoryItemCreateArgs = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
    /**
     * The data needed to create a CategoryItem.
     * 
    **/
    data: XOR<CategoryItemCreateInput, CategoryItemUncheckedCreateInput>
  }


  /**
   * CategoryItem update
   */
  export type CategoryItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
    /**
     * The data needed to update a CategoryItem.
     * 
    **/
    data: XOR<CategoryItemUpdateInput, CategoryItemUncheckedUpdateInput>
    /**
     * Choose, which CategoryItem to update.
     * 
    **/
    where: CategoryItemWhereUniqueInput
  }


  /**
   * CategoryItem updateMany
   */
  export type CategoryItemUpdateManyArgs = {
    /**
     * The data used to update CategoryItems.
     * 
    **/
    data: XOR<CategoryItemUpdateManyMutationInput, CategoryItemUncheckedUpdateManyInput>
    /**
     * Filter which CategoryItems to update
     * 
    **/
    where?: CategoryItemWhereInput
  }


  /**
   * CategoryItem upsert
   */
  export type CategoryItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
    /**
     * The filter to search for the CategoryItem to update in case it exists.
     * 
    **/
    where: CategoryItemWhereUniqueInput
    /**
     * In case the CategoryItem found by the `where` argument doesn't exist, create a new CategoryItem with this data.
     * 
    **/
    create: XOR<CategoryItemCreateInput, CategoryItemUncheckedCreateInput>
    /**
     * In case the CategoryItem was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryItemUpdateInput, CategoryItemUncheckedUpdateInput>
  }


  /**
   * CategoryItem delete
   */
  export type CategoryItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
    /**
     * Filter which CategoryItem to delete.
     * 
    **/
    where: CategoryItemWhereUniqueInput
  }


  /**
   * CategoryItem deleteMany
   */
  export type CategoryItemDeleteManyArgs = {
    /**
     * Filter which CategoryItems to delete
     * 
    **/
    where?: CategoryItemWhereInput
  }


  /**
   * CategoryItem: findUniqueOrThrow
   */
  export type CategoryItemFindUniqueOrThrowArgs = CategoryItemFindUniqueArgsBase
      

  /**
   * CategoryItem: findFirstOrThrow
   */
  export type CategoryItemFindFirstOrThrowArgs = CategoryItemFindFirstArgsBase
      

  /**
   * CategoryItem without action
   */
  export type CategoryItemArgs = {
    /**
     * Select specific fields to fetch from the CategoryItem
     * 
    **/
    select?: CategoryItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryItemInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryItemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cost: 'cost',
    perParticipant: 'perParticipant',
    versionId: 'versionId',
    categoryId: 'categoryId'
  };

  export type CategoryItemScalarFieldEnum = (typeof CategoryItemScalarFieldEnum)[keyof typeof CategoryItemScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    integrationId: 'integrationId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const IntegrationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    budget: 'budget',
    participants: 'participants',
    picture: 'picture',
    dateStart: 'dateStart',
    dateEnd: 'dateEnd'
  };

  export type IntegrationScalarFieldEnum = (typeof IntegrationScalarFieldEnum)[keyof typeof IntegrationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VersionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    integrationId: 'integrationId',
    isFinal: 'isFinal'
  };

  export type VersionScalarFieldEnum = (typeof VersionScalarFieldEnum)[keyof typeof VersionScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type IntegrationWhereInput = {
    AND?: Enumerable<IntegrationWhereInput>
    OR?: Enumerable<IntegrationWhereInput>
    NOT?: Enumerable<IntegrationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    budget?: IntFilter | number
    participants?: IntFilter | number
    picture?: StringNullableFilter | string | null
    dateStart?: DateTimeFilter | Date | string
    dateEnd?: DateTimeFilter | Date | string
    versions?: VersionListRelationFilter
    categories?: CategoryListRelationFilter
  }

  export type IntegrationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    budget?: SortOrder
    participants?: SortOrder
    picture?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    versions?: VersionOrderByRelationAggregateInput
    categories?: CategoryOrderByRelationAggregateInput
  }

  export type IntegrationWhereUniqueInput = {
    id?: number
  }

  export type IntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    budget?: SortOrder
    participants?: SortOrder
    picture?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    _count?: IntegrationCountOrderByAggregateInput
    _avg?: IntegrationAvgOrderByAggregateInput
    _max?: IntegrationMaxOrderByAggregateInput
    _min?: IntegrationMinOrderByAggregateInput
    _sum?: IntegrationSumOrderByAggregateInput
  }

  export type IntegrationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<IntegrationScalarWhereWithAggregatesInput>
    OR?: Enumerable<IntegrationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<IntegrationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    budget?: IntWithAggregatesFilter | number
    participants?: IntWithAggregatesFilter | number
    picture?: StringNullableWithAggregatesFilter | string | null
    dateStart?: DateTimeWithAggregatesFilter | Date | string
    dateEnd?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VersionWhereInput = {
    AND?: Enumerable<VersionWhereInput>
    OR?: Enumerable<VersionWhereInput>
    NOT?: Enumerable<VersionWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    integrationId?: IntFilter | number
    categoryItems?: CategoryItemListRelationFilter
    isFinal?: BoolFilter | boolean
  }

  export type VersionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    integration?: IntegrationOrderByWithRelationInput
    integrationId?: SortOrder
    categoryItems?: CategoryItemOrderByRelationAggregateInput
    isFinal?: SortOrder
  }

  export type VersionWhereUniqueInput = {
    id?: number
  }

  export type VersionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    isFinal?: SortOrder
    _count?: VersionCountOrderByAggregateInput
    _avg?: VersionAvgOrderByAggregateInput
    _max?: VersionMaxOrderByAggregateInput
    _min?: VersionMinOrderByAggregateInput
    _sum?: VersionSumOrderByAggregateInput
  }

  export type VersionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VersionScalarWhereWithAggregatesInput>
    OR?: Enumerable<VersionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VersionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    integrationId?: IntWithAggregatesFilter | number
    isFinal?: BoolWithAggregatesFilter | boolean
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    integrationId?: IntFilter | number
    categoryItems?: CategoryItemListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    integration?: IntegrationOrderByWithRelationInput
    integrationId?: SortOrder
    categoryItems?: CategoryItemOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    integrationId?: IntWithAggregatesFilter | number
  }

  export type CategoryItemWhereInput = {
    AND?: Enumerable<CategoryItemWhereInput>
    OR?: Enumerable<CategoryItemWhereInput>
    NOT?: Enumerable<CategoryItemWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    cost?: IntFilter | number
    perParticipant?: BoolFilter | boolean
    version?: XOR<VersionRelationFilter, VersionWhereInput>
    versionId?: IntFilter | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    categoryId?: IntFilter | number
  }

  export type CategoryItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    perParticipant?: SortOrder
    version?: VersionOrderByWithRelationInput
    versionId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    categoryId?: SortOrder
  }

  export type CategoryItemWhereUniqueInput = {
    id?: number
  }

  export type CategoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    perParticipant?: SortOrder
    versionId?: SortOrder
    categoryId?: SortOrder
    _count?: CategoryItemCountOrderByAggregateInput
    _avg?: CategoryItemAvgOrderByAggregateInput
    _max?: CategoryItemMaxOrderByAggregateInput
    _min?: CategoryItemMinOrderByAggregateInput
    _sum?: CategoryItemSumOrderByAggregateInput
  }

  export type CategoryItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    cost?: IntWithAggregatesFilter | number
    perParticipant?: BoolWithAggregatesFilter | boolean
    versionId?: IntWithAggregatesFilter | number
    categoryId?: IntWithAggregatesFilter | number
  }

  export type IntegrationCreateInput = {
    name: string
    budget: number
    participants: number
    picture?: string | null
    dateStart: Date | string
    dateEnd: Date | string
    versions?: VersionCreateNestedManyWithoutIntegrationInput
    categories?: CategoryCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateInput = {
    id?: number
    name: string
    budget: number
    participants: number
    picture?: string | null
    dateStart: Date | string
    dateEnd: Date | string
    versions?: VersionUncheckedCreateNestedManyWithoutIntegrationInput
    categories?: CategoryUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: VersionUpdateManyWithoutIntegrationNestedInput
    categories?: CategoryUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: VersionUncheckedUpdateManyWithoutIntegrationNestedInput
    categories?: CategoryUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VersionCreateInput = {
    name: string
    integration: IntegrationCreateNestedOneWithoutVersionsInput
    categoryItems?: CategoryItemCreateNestedManyWithoutVersionInput
    isFinal?: boolean
  }

  export type VersionUncheckedCreateInput = {
    id?: number
    name: string
    integrationId: number
    categoryItems?: CategoryItemUncheckedCreateNestedManyWithoutVersionInput
    isFinal?: boolean
  }

  export type VersionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutVersionsNestedInput
    categoryItems?: CategoryItemUpdateManyWithoutVersionNestedInput
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VersionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: IntFieldUpdateOperationsInput | number
    categoryItems?: CategoryItemUncheckedUpdateManyWithoutVersionNestedInput
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VersionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VersionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: IntFieldUpdateOperationsInput | number
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoryCreateInput = {
    name: string
    integration: IntegrationCreateNestedOneWithoutCategoriesInput
    categoryItems?: CategoryItemCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    integrationId: number
    categoryItems?: CategoryItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutCategoriesNestedInput
    categoryItems?: CategoryItemUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: IntFieldUpdateOperationsInput | number
    categoryItems?: CategoryItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryItemCreateInput = {
    name: string
    cost: number
    perParticipant: boolean
    version: VersionCreateNestedOneWithoutCategoryItemsInput
    category: CategoryCreateNestedOneWithoutCategoryItemsInput
  }

  export type CategoryItemUncheckedCreateInput = {
    id?: number
    name: string
    cost: number
    perParticipant: boolean
    versionId: number
    categoryId: number
  }

  export type CategoryItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    version?: VersionUpdateOneRequiredWithoutCategoryItemsNestedInput
    category?: CategoryUpdateOneRequiredWithoutCategoryItemsNestedInput
  }

  export type CategoryItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    versionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoryItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    versionId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type VersionListRelationFilter = {
    every?: VersionWhereInput
    some?: VersionWhereInput
    none?: VersionWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type VersionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    budget?: SortOrder
    participants?: SortOrder
    picture?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
  }

  export type IntegrationAvgOrderByAggregateInput = {
    id?: SortOrder
    budget?: SortOrder
    participants?: SortOrder
  }

  export type IntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    budget?: SortOrder
    participants?: SortOrder
    picture?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
  }

  export type IntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    budget?: SortOrder
    participants?: SortOrder
    picture?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
  }

  export type IntegrationSumOrderByAggregateInput = {
    id?: SortOrder
    budget?: SortOrder
    participants?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntegrationRelationFilter = {
    is?: IntegrationWhereInput
    isNot?: IntegrationWhereInput
  }

  export type CategoryItemListRelationFilter = {
    every?: CategoryItemWhereInput
    some?: CategoryItemWhereInput
    none?: CategoryItemWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type CategoryItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VersionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    isFinal?: SortOrder
  }

  export type VersionAvgOrderByAggregateInput = {
    id?: SortOrder
    integrationId?: SortOrder
  }

  export type VersionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    isFinal?: SortOrder
  }

  export type VersionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
    isFinal?: SortOrder
  }

  export type VersionSumOrderByAggregateInput = {
    id?: SortOrder
    integrationId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    integrationId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    integrationId?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    integrationId?: SortOrder
  }

  export type VersionRelationFilter = {
    is?: VersionWhereInput
    isNot?: VersionWhereInput
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CategoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    perParticipant?: SortOrder
    versionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryItemAvgOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    versionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    perParticipant?: SortOrder
    versionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cost?: SortOrder
    perParticipant?: SortOrder
    versionId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryItemSumOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    versionId?: SortOrder
    categoryId?: SortOrder
  }

  export type VersionCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<Enumerable<VersionCreateWithoutIntegrationInput>, Enumerable<VersionUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutIntegrationInput>
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type CategoryCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutIntegrationInput>, Enumerable<CategoryUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutIntegrationInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type VersionUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<Enumerable<VersionCreateWithoutIntegrationInput>, Enumerable<VersionUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutIntegrationInput>
    connect?: Enumerable<VersionWhereUniqueInput>
  }

  export type CategoryUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutIntegrationInput>, Enumerable<CategoryUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutIntegrationInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type VersionUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutIntegrationInput>, Enumerable<VersionUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutIntegrationInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutIntegrationInput>
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutIntegrationInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutIntegrationInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type CategoryUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutIntegrationInput>, Enumerable<CategoryUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutIntegrationInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutIntegrationInput>
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutIntegrationInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutIntegrationInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type VersionUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<Enumerable<VersionCreateWithoutIntegrationInput>, Enumerable<VersionUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<VersionCreateOrConnectWithoutIntegrationInput>
    upsert?: Enumerable<VersionUpsertWithWhereUniqueWithoutIntegrationInput>
    set?: Enumerable<VersionWhereUniqueInput>
    disconnect?: Enumerable<VersionWhereUniqueInput>
    delete?: Enumerable<VersionWhereUniqueInput>
    connect?: Enumerable<VersionWhereUniqueInput>
    update?: Enumerable<VersionUpdateWithWhereUniqueWithoutIntegrationInput>
    updateMany?: Enumerable<VersionUpdateManyWithWhereWithoutIntegrationInput>
    deleteMany?: Enumerable<VersionScalarWhereInput>
  }

  export type CategoryUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutIntegrationInput>, Enumerable<CategoryUncheckedCreateWithoutIntegrationInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutIntegrationInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutIntegrationInput>
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutIntegrationInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutIntegrationInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type IntegrationCreateNestedOneWithoutVersionsInput = {
    create?: XOR<IntegrationCreateWithoutVersionsInput, IntegrationUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutVersionsInput
    connect?: IntegrationWhereUniqueInput
  }

  export type CategoryItemCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutVersionInput>, Enumerable<CategoryItemUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutVersionInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
  }

  export type CategoryItemUncheckedCreateNestedManyWithoutVersionInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutVersionInput>, Enumerable<CategoryItemUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutVersionInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
  }

  export type IntegrationUpdateOneRequiredWithoutVersionsNestedInput = {
    create?: XOR<IntegrationCreateWithoutVersionsInput, IntegrationUncheckedCreateWithoutVersionsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutVersionsInput
    upsert?: IntegrationUpsertWithoutVersionsInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<IntegrationUpdateWithoutVersionsInput, IntegrationUncheckedUpdateWithoutVersionsInput>
  }

  export type CategoryItemUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutVersionInput>, Enumerable<CategoryItemUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<CategoryItemUpsertWithWhereUniqueWithoutVersionInput>
    set?: Enumerable<CategoryItemWhereUniqueInput>
    disconnect?: Enumerable<CategoryItemWhereUniqueInput>
    delete?: Enumerable<CategoryItemWhereUniqueInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
    update?: Enumerable<CategoryItemUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<CategoryItemUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<CategoryItemScalarWhereInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CategoryItemUncheckedUpdateManyWithoutVersionNestedInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutVersionInput>, Enumerable<CategoryItemUncheckedCreateWithoutVersionInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutVersionInput>
    upsert?: Enumerable<CategoryItemUpsertWithWhereUniqueWithoutVersionInput>
    set?: Enumerable<CategoryItemWhereUniqueInput>
    disconnect?: Enumerable<CategoryItemWhereUniqueInput>
    delete?: Enumerable<CategoryItemWhereUniqueInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
    update?: Enumerable<CategoryItemUpdateWithWhereUniqueWithoutVersionInput>
    updateMany?: Enumerable<CategoryItemUpdateManyWithWhereWithoutVersionInput>
    deleteMany?: Enumerable<CategoryItemScalarWhereInput>
  }

  export type IntegrationCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<IntegrationCreateWithoutCategoriesInput, IntegrationUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutCategoriesInput
    connect?: IntegrationWhereUniqueInput
  }

  export type CategoryItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutCategoryInput>, Enumerable<CategoryItemUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
  }

  export type CategoryItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutCategoryInput>, Enumerable<CategoryItemUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutCategoryInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
  }

  export type IntegrationUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<IntegrationCreateWithoutCategoriesInput, IntegrationUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutCategoriesInput
    upsert?: IntegrationUpsertWithoutCategoriesInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<IntegrationUpdateWithoutCategoriesInput, IntegrationUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutCategoryInput>, Enumerable<CategoryItemUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoryItemUpsertWithWhereUniqueWithoutCategoryInput>
    set?: Enumerable<CategoryItemWhereUniqueInput>
    disconnect?: Enumerable<CategoryItemWhereUniqueInput>
    delete?: Enumerable<CategoryItemWhereUniqueInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
    update?: Enumerable<CategoryItemUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoryItemUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoryItemScalarWhereInput>
  }

  export type CategoryItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<CategoryItemCreateWithoutCategoryInput>, Enumerable<CategoryItemUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<CategoryItemCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<CategoryItemUpsertWithWhereUniqueWithoutCategoryInput>
    set?: Enumerable<CategoryItemWhereUniqueInput>
    disconnect?: Enumerable<CategoryItemWhereUniqueInput>
    delete?: Enumerable<CategoryItemWhereUniqueInput>
    connect?: Enumerable<CategoryItemWhereUniqueInput>
    update?: Enumerable<CategoryItemUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<CategoryItemUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<CategoryItemScalarWhereInput>
  }

  export type VersionCreateNestedOneWithoutCategoryItemsInput = {
    create?: XOR<VersionCreateWithoutCategoryItemsInput, VersionUncheckedCreateWithoutCategoryItemsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutCategoryItemsInput
    connect?: VersionWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutCategoryItemsInput = {
    create?: XOR<CategoryCreateWithoutCategoryItemsInput, CategoryUncheckedCreateWithoutCategoryItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCategoryItemsInput
    connect?: CategoryWhereUniqueInput
  }

  export type VersionUpdateOneRequiredWithoutCategoryItemsNestedInput = {
    create?: XOR<VersionCreateWithoutCategoryItemsInput, VersionUncheckedCreateWithoutCategoryItemsInput>
    connectOrCreate?: VersionCreateOrConnectWithoutCategoryItemsInput
    upsert?: VersionUpsertWithoutCategoryItemsInput
    connect?: VersionWhereUniqueInput
    update?: XOR<VersionUpdateWithoutCategoryItemsInput, VersionUncheckedUpdateWithoutCategoryItemsInput>
  }

  export type CategoryUpdateOneRequiredWithoutCategoryItemsNestedInput = {
    create?: XOR<CategoryCreateWithoutCategoryItemsInput, CategoryUncheckedCreateWithoutCategoryItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCategoryItemsInput
    upsert?: CategoryUpsertWithoutCategoryItemsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutCategoryItemsInput, CategoryUncheckedUpdateWithoutCategoryItemsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type VersionCreateWithoutIntegrationInput = {
    name: string
    categoryItems?: CategoryItemCreateNestedManyWithoutVersionInput
    isFinal?: boolean
  }

  export type VersionUncheckedCreateWithoutIntegrationInput = {
    id?: number
    name: string
    categoryItems?: CategoryItemUncheckedCreateNestedManyWithoutVersionInput
    isFinal?: boolean
  }

  export type VersionCreateOrConnectWithoutIntegrationInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutIntegrationInput, VersionUncheckedCreateWithoutIntegrationInput>
  }

  export type CategoryCreateWithoutIntegrationInput = {
    name: string
    categoryItems?: CategoryItemCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutIntegrationInput = {
    id?: number
    name: string
    categoryItems?: CategoryItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutIntegrationInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutIntegrationInput, CategoryUncheckedCreateWithoutIntegrationInput>
  }

  export type VersionUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: VersionWhereUniqueInput
    update: XOR<VersionUpdateWithoutIntegrationInput, VersionUncheckedUpdateWithoutIntegrationInput>
    create: XOR<VersionCreateWithoutIntegrationInput, VersionUncheckedCreateWithoutIntegrationInput>
  }

  export type VersionUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: VersionWhereUniqueInput
    data: XOR<VersionUpdateWithoutIntegrationInput, VersionUncheckedUpdateWithoutIntegrationInput>
  }

  export type VersionUpdateManyWithWhereWithoutIntegrationInput = {
    where: VersionScalarWhereInput
    data: XOR<VersionUpdateManyMutationInput, VersionUncheckedUpdateManyWithoutVersionsInput>
  }

  export type VersionScalarWhereInput = {
    AND?: Enumerable<VersionScalarWhereInput>
    OR?: Enumerable<VersionScalarWhereInput>
    NOT?: Enumerable<VersionScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    integrationId?: IntFilter | number
    isFinal?: BoolFilter | boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutIntegrationInput, CategoryUncheckedUpdateWithoutIntegrationInput>
    create: XOR<CategoryCreateWithoutIntegrationInput, CategoryUncheckedCreateWithoutIntegrationInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutIntegrationInput, CategoryUncheckedUpdateWithoutIntegrationInput>
  }

  export type CategoryUpdateManyWithWhereWithoutIntegrationInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: Enumerable<CategoryScalarWhereInput>
    OR?: Enumerable<CategoryScalarWhereInput>
    NOT?: Enumerable<CategoryScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    integrationId?: IntFilter | number
  }

  export type IntegrationCreateWithoutVersionsInput = {
    name: string
    budget: number
    participants: number
    picture?: string | null
    dateStart: Date | string
    dateEnd: Date | string
    categories?: CategoryCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutVersionsInput = {
    id?: number
    name: string
    budget: number
    participants: number
    picture?: string | null
    dateStart: Date | string
    dateEnd: Date | string
    categories?: CategoryUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutVersionsInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutVersionsInput, IntegrationUncheckedCreateWithoutVersionsInput>
  }

  export type CategoryItemCreateWithoutVersionInput = {
    name: string
    cost: number
    perParticipant: boolean
    category: CategoryCreateNestedOneWithoutCategoryItemsInput
  }

  export type CategoryItemUncheckedCreateWithoutVersionInput = {
    id?: number
    name: string
    cost: number
    perParticipant: boolean
    categoryId: number
  }

  export type CategoryItemCreateOrConnectWithoutVersionInput = {
    where: CategoryItemWhereUniqueInput
    create: XOR<CategoryItemCreateWithoutVersionInput, CategoryItemUncheckedCreateWithoutVersionInput>
  }

  export type IntegrationUpsertWithoutVersionsInput = {
    update: XOR<IntegrationUpdateWithoutVersionsInput, IntegrationUncheckedUpdateWithoutVersionsInput>
    create: XOR<IntegrationCreateWithoutVersionsInput, IntegrationUncheckedCreateWithoutVersionsInput>
  }

  export type IntegrationUpdateWithoutVersionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutVersionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type CategoryItemUpsertWithWhereUniqueWithoutVersionInput = {
    where: CategoryItemWhereUniqueInput
    update: XOR<CategoryItemUpdateWithoutVersionInput, CategoryItemUncheckedUpdateWithoutVersionInput>
    create: XOR<CategoryItemCreateWithoutVersionInput, CategoryItemUncheckedCreateWithoutVersionInput>
  }

  export type CategoryItemUpdateWithWhereUniqueWithoutVersionInput = {
    where: CategoryItemWhereUniqueInput
    data: XOR<CategoryItemUpdateWithoutVersionInput, CategoryItemUncheckedUpdateWithoutVersionInput>
  }

  export type CategoryItemUpdateManyWithWhereWithoutVersionInput = {
    where: CategoryItemScalarWhereInput
    data: XOR<CategoryItemUpdateManyMutationInput, CategoryItemUncheckedUpdateManyWithoutCategoryItemsInput>
  }

  export type CategoryItemScalarWhereInput = {
    AND?: Enumerable<CategoryItemScalarWhereInput>
    OR?: Enumerable<CategoryItemScalarWhereInput>
    NOT?: Enumerable<CategoryItemScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    cost?: IntFilter | number
    perParticipant?: BoolFilter | boolean
    versionId?: IntFilter | number
    categoryId?: IntFilter | number
  }

  export type IntegrationCreateWithoutCategoriesInput = {
    name: string
    budget: number
    participants: number
    picture?: string | null
    dateStart: Date | string
    dateEnd: Date | string
    versions?: VersionCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    budget: number
    participants: number
    picture?: string | null
    dateStart: Date | string
    dateEnd: Date | string
    versions?: VersionUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutCategoriesInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutCategoriesInput, IntegrationUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryItemCreateWithoutCategoryInput = {
    name: string
    cost: number
    perParticipant: boolean
    version: VersionCreateNestedOneWithoutCategoryItemsInput
  }

  export type CategoryItemUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    cost: number
    perParticipant: boolean
    versionId: number
  }

  export type CategoryItemCreateOrConnectWithoutCategoryInput = {
    where: CategoryItemWhereUniqueInput
    create: XOR<CategoryItemCreateWithoutCategoryInput, CategoryItemUncheckedCreateWithoutCategoryInput>
  }

  export type IntegrationUpsertWithoutCategoriesInput = {
    update: XOR<IntegrationUpdateWithoutCategoriesInput, IntegrationUncheckedUpdateWithoutCategoriesInput>
    create: XOR<IntegrationCreateWithoutCategoriesInput, IntegrationUncheckedCreateWithoutCategoriesInput>
  }

  export type IntegrationUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: VersionUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    budget?: IntFieldUpdateOperationsInput | number
    participants?: IntFieldUpdateOperationsInput | number
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    versions?: VersionUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type CategoryItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CategoryItemWhereUniqueInput
    update: XOR<CategoryItemUpdateWithoutCategoryInput, CategoryItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<CategoryItemCreateWithoutCategoryInput, CategoryItemUncheckedCreateWithoutCategoryInput>
  }

  export type CategoryItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CategoryItemWhereUniqueInput
    data: XOR<CategoryItemUpdateWithoutCategoryInput, CategoryItemUncheckedUpdateWithoutCategoryInput>
  }

  export type CategoryItemUpdateManyWithWhereWithoutCategoryInput = {
    where: CategoryItemScalarWhereInput
    data: XOR<CategoryItemUpdateManyMutationInput, CategoryItemUncheckedUpdateManyWithoutCategoryItemsInput>
  }

  export type VersionCreateWithoutCategoryItemsInput = {
    name: string
    integration: IntegrationCreateNestedOneWithoutVersionsInput
    isFinal?: boolean
  }

  export type VersionUncheckedCreateWithoutCategoryItemsInput = {
    id?: number
    name: string
    integrationId: number
    isFinal?: boolean
  }

  export type VersionCreateOrConnectWithoutCategoryItemsInput = {
    where: VersionWhereUniqueInput
    create: XOR<VersionCreateWithoutCategoryItemsInput, VersionUncheckedCreateWithoutCategoryItemsInput>
  }

  export type CategoryCreateWithoutCategoryItemsInput = {
    name: string
    integration: IntegrationCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutCategoryItemsInput = {
    id?: number
    name: string
    integrationId: number
  }

  export type CategoryCreateOrConnectWithoutCategoryItemsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCategoryItemsInput, CategoryUncheckedCreateWithoutCategoryItemsInput>
  }

  export type VersionUpsertWithoutCategoryItemsInput = {
    update: XOR<VersionUpdateWithoutCategoryItemsInput, VersionUncheckedUpdateWithoutCategoryItemsInput>
    create: XOR<VersionCreateWithoutCategoryItemsInput, VersionUncheckedCreateWithoutCategoryItemsInput>
  }

  export type VersionUpdateWithoutCategoryItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutVersionsNestedInput
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VersionUncheckedUpdateWithoutCategoryItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: IntFieldUpdateOperationsInput | number
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoryUpsertWithoutCategoryItemsInput = {
    update: XOR<CategoryUpdateWithoutCategoryItemsInput, CategoryUncheckedUpdateWithoutCategoryItemsInput>
    create: XOR<CategoryCreateWithoutCategoryItemsInput, CategoryUncheckedCreateWithoutCategoryItemsInput>
  }

  export type CategoryUpdateWithoutCategoryItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCategoryItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    integrationId?: IntFieldUpdateOperationsInput | number
  }

  export type VersionUpdateWithoutIntegrationInput = {
    name?: StringFieldUpdateOperationsInput | string
    categoryItems?: CategoryItemUpdateManyWithoutVersionNestedInput
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VersionUncheckedUpdateWithoutIntegrationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryItems?: CategoryItemUncheckedUpdateManyWithoutVersionNestedInput
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VersionUncheckedUpdateManyWithoutVersionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isFinal?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoryUpdateWithoutIntegrationInput = {
    name?: StringFieldUpdateOperationsInput | string
    categoryItems?: CategoryItemUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutIntegrationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    categoryItems?: CategoryItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryItemUpdateWithoutVersionInput = {
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    category?: CategoryUpdateOneRequiredWithoutCategoryItemsNestedInput
  }

  export type CategoryItemUncheckedUpdateWithoutVersionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryItemUncheckedUpdateManyWithoutCategoryItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryItemUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    version?: VersionUpdateOneRequiredWithoutCategoryItemsNestedInput
  }

  export type CategoryItemUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    cost?: IntFieldUpdateOperationsInput | number
    perParticipant?: BoolFieldUpdateOperationsInput | boolean
    versionId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}